# yaml-language-server: $schema=https://app.stainlessapi.com/config.schema.json

organization:
  name: honcho
  docs: https://docs.honcho.dev
  contact: hello@plasticlabs.ai
  github_org: plastic-labs
resources:
  apps:
    methods:
      get: get /v1/apps/{app_id}
      get_by_name: get /v1/apps/name/{name}
      update: put /v1/apps/{app_id}
      create: post /v1/apps
      get_or_create: get /v1/apps/get_or_create/{name}
    subresources:
      users:
        methods:
          create: post /v1/apps/{app_id}/users
          list: post /v1/apps/{app_id}/users/list
          get: get /v1/apps/{app_id}/users/{user_id}
          get_by_name: get /v1/apps/{app_id}/users/name/{name}
          get_or_create: get /v1/apps/{app_id}/users/get_or_create/{name}
          update: put /v1/apps/{app_id}/users/{user_id}
        subresources:
          metamessages:
            methods:
              list: post /v1/apps/{app_id}/users/{user_id}/metamessages/list
          sessions:
            methods:
              list: post /v1/apps/{app_id}/users/{user_id}/sessions/list
              create: post /v1/apps/{app_id}/users/{user_id}/sessions
              update: put /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}
              delete: delete /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}
              get: get /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}
              chat: post /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}/chat
              stream: post /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}/chat/stream
              clone: get /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}/clone
            subresources:
              messages:
                methods:
                  create: >-
                    post /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}/messages
                  list: >-
                    post /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}/messages/list
                  get: >-
                    get /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}/messages/{message_id}
                  update: >-
                    put /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}/messages/{message_id}
                  batch: >-
                    post /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}/messages/batch
                models:
                  message: Message
                  page_message: Page_Message_
              metamessages:
                methods:
                  create: >-
                    post /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}/metamessages
                  list: >-
                    post /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}/metamessages/list
                  get: >-
                    get
                    /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}/metamessages/{metamessage_id}
                  update: >-
                    put
                    /v1/apps/{app_id}/users/{user_id}/sessions/{session_id}/metamessages/{metamessage_id}
                models:
                  metamessage: Metamessage
                  page_metamessage: Page_Metamessage_
            models:
              session: Session
              page_session: Page_Session_
              agent_chat: AgentChat
          collections:
            methods:
              list: post /v1/apps/{app_id}/users/{user_id}/collections/list
              create: post /v1/apps/{app_id}/users/{user_id}/collections
              get_by_name: get /v1/apps/{app_id}/users/{user_id}/collections/name/{name}
              update: put /v1/apps/{app_id}/users/{user_id}/collections/{collection_id}
              delete: >-
                delete /v1/apps/{app_id}/users/{user_id}/collections/{collection_id}
              get: get /v1/apps/{app_id}/users/{user_id}/collections/{collection_id}
            subresources:
              documents:
                methods:
                  list: >-
                    post /v1/apps/{app_id}/users/{user_id}/collections/{collection_id}/documents/list
                  create: >-
                    post /v1/apps/{app_id}/users/{user_id}/collections/{collection_id}/documents
                  get: >-
                    get
                    /v1/apps/{app_id}/users/{user_id}/collections/{collection_id}/documents/{document_id}
                  update: >-
                    put
                    /v1/apps/{app_id}/users/{user_id}/collections/{collection_id}/documents/{document_id}
                  delete: >-
                    delete
                    /v1/apps/{app_id}/users/{user_id}/collections/{collection_id}/documents/{document_id}
                  query: post /v1/apps/{app_id}/users/{user_id}/collections/{collection_id}/documents/query
                models:
                  document: Document
                  page_document: Page_Document_
            models:
              collection: Collection
              page_collection: Page_Collection_
        models:
          user: User
          page_user: Page_User_
    models:
      app: App
targets:
  node:
    readme_title: honcho-ai
    production_repo: plastic-labs/honcho-node
    package_name: honcho-ai
    publish:
      npm: true
  python:
    readme_title: honcho-ai
    production_repo: plastic-labs/honcho-python
    package_name: honcho
    project_name: honcho-ai
    publish:
      pypi: true
settings:
  license: Apache-2.0
client_settings:
  opts:
    api_key:
      # or `token`, `auth_token`, etc.
      type: string
      nullable: true
      read_env: HONCHO_API_KEY
      auth: { security_scheme: HTTPBearer }
security:
  - HTTPBearer: []
  - {}
environments:
  demo: https://demo.honcho.dev
  local: http://localhost:8000
query_settings:
  nested_format: brackets
  array_format: comma
readme:
  example_requests:
    default:
      type: request
      endpoint: post /v1/apps
      params: &ref_0 {}
    headline:
      type: request
      endpoint: post /v1/apps
      params: *ref_0
    pagination:
      type: request
      endpoint: post /v1/apps/{app_id}/users/list
      params:
        app_id: REPLACE_ME
pagination:
  - name: page
    type: page_number
    request:
      page:
        type: integer
        description: The page number
        x-stainless-pagination-property:
          purpose: page_number_param
      size:
        type: integer
        description: The number of items in a page
    response:
      total:
        type: integer
      items:
        type: array
        items: {}
        x-stainless-pagination-property:
          purpose: items
      page:
        type: integer
        x-stainless-pagination-property:
          purpose: current_page_number_field
      size:
        type: integer
      pages:
        type: integer
        x-stainless-pagination-property:
          purpose: total_page_count_field
openapi:
  code_samples: mintlify

